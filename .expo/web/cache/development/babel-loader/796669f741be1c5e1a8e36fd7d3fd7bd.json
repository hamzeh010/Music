{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect, useRef } from 'react';\nimport happi from \"../api/happi\";\nexport default (function () {\n  var _useState = useState({\n    album: \"\",\n    api_album: \"\",\n    api_albums: \"\",\n    api_artist: \"\",\n    api_lyrics: \"\",\n    api_track: \"\",\n    api_tracks: \"\",\n    artist: \"\",\n    bmp: 0,\n    cover: \"\",\n    haslyrics: false,\n    id_album: 1,\n    id_artist: 1,\n    id_track: 1,\n    track: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      results = _useState2[0],\n      setResults = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setError = _useState4[1];\n\n  var mountedRef = useRef(true);\n\n  var getTracksByName = function getTracksByName(searchTerm) {\n    var response;\n    return _regeneratorRuntime.async(function getTracksByName$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(happi.get('/music', {\n              params: {\n                q: searchTerm,\n                limit: 50,\n                apikey: '42405dFzin2GNUB68DBOOniGJLng7JMKBTGzosIyjGiEDUjuWj1GNv8p',\n                type: 'track'\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            setResults(response.data.result);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            setError(\"somthing went wrong\");\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  useEffect(function () {\n    getTracksByName('sia');\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return [results, getTracksByName, errorMsg];\n});","map":{"version":3,"sources":["/Users/hamzeh/Downloads/Music/src/hooks/getTracksByName.ts"],"names":["useState","useEffect","useRef","happi","album","api_album","api_albums","api_artist","api_lyrics","api_track","api_tracks","artist","bmp","cover","haslyrics","id_album","id_artist","id_track","track","results","setResults","errorMsg","setError","mountedRef","getTracksByName","searchTerm","get","params","q","limit","apikey","type","response","data","result","current"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,OAAOC,KAAP;AAkBA,gBAAe,YAAM;AAAA,kBACgBH,QAAQ,CAAC;AAC1CI,IAAAA,KAAK,EAAE,EADmC;AAE1CC,IAAAA,SAAS,EAAE,EAF+B;AAG1CC,IAAAA,UAAU,EAAE,EAH8B;AAI1CC,IAAAA,UAAU,EAAE,EAJ8B;AAK1CC,IAAAA,UAAU,EAAE,EAL8B;AAM1CC,IAAAA,SAAS,EAAE,EAN+B;AAO1CC,IAAAA,UAAU,EAAE,EAP8B;AAQ1CC,IAAAA,MAAM,EAAE,EARkC;AAS1CC,IAAAA,GAAG,EAAE,CATqC;AAU1CC,IAAAA,KAAK,EAAE,EAVmC;AAW1CC,IAAAA,SAAS,EAAE,KAX+B;AAY1CC,IAAAA,QAAQ,EAAE,CAZgC;AAa1CC,IAAAA,SAAS,EAAE,CAb+B;AAc1CC,IAAAA,QAAQ,EAAE,CAdgC;AAe1CC,IAAAA,KAAK,EAAE;AAfmC,GAAD,CADxB;AAAA;AAAA,MACVC,OADU;AAAA,MACFC,UADE;;AAAA,mBAkBepB,QAAQ,CAAC,EAAD,CAlBvB;AAAA;AAAA,MAkBVqB,QAlBU;AAAA,MAkBDC,QAlBC;;AAmBjB,MAAMC,UAAc,GAAGrB,MAAM,CAAC,IAAD,CAA7B;;AAEA,MAAMsB,eAAe,GAAG,SAAlBA,eAAkB,CAAMC,UAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEOtB,KAAK,CAACuB,GAAN,CAAU,QAAV,EAAoB;AACvCC,cAAAA,MAAM,EAAC;AACHC,gBAAAA,CAAC,EAACH,UADC;AAEHI,gBAAAA,KAAK,EAAC,EAFH;AAGHC,gBAAAA,MAAM,EAAC,0DAHJ;AAIHC,gBAAAA,IAAI,EAAC;AAJF;AADgC,aAApB,CAFP;;AAAA;AAEVC,YAAAA,QAFU;AAWhBZ,YAAAA,UAAU,CAACY,QAAQ,CAACC,IAAT,CAAcC,MAAf,CAAV;AAXgB;AAAA;;AAAA;AAAA;AAAA;AAelBZ,YAAAA,QAAQ,CAAC,qBAAD,CAAR;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAmBArB,EAAAA,SAAS,CAAC,YAAI;AACVuB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACA,WAAO,YAAM;AACTD,MAAAA,UAAU,CAACY,OAAX,GAAqB,KAArB;AACD,KAFH;AAGH,GALQ,EAKP,EALO,CAAT;AAOA,SAAO,CAAChB,OAAD,EAASK,eAAT,EAAyBH,QAAzB,CAAP;AACH,CAhDD","sourcesContent":["import {useState, useEffect, useRef} from 'react';\nimport happi from '../api/happi';\nexport interface track {\n    album: string;\n    api_album: string;\n    api_albums: string;\n    api_artist: string;\n    api_lyrics: string;\n    api_track: string;\n    api_tracks: string;\n    artist: string;\n    bmp: number;\n    cover: string;\n    haslyrics: boolean;\n    id_album: number;\n    id_artist: number;\n    id_track: number;\n    track: string\n  }\nexport default () => {\n    const [results,setResults]:any = useState({\n    album: \"\",\n    api_album: \"\",\n    api_albums: \"\",\n    api_artist: \"\",\n    api_lyrics: \"\",\n    api_track: \"\",\n    api_tracks: \"\",\n    artist: \"\",\n    bmp: 0,\n    cover: \"\",\n    haslyrics: false,\n    id_album: 1,\n    id_artist: 1,\n    id_track: 1,\n    track: \"\",\n    });\n    const [errorMsg,setError]:any = useState('');\n    const mountedRef:any = useRef(true);\n\n    const getTracksByName = async searchTerm => {\n        try{\n            const response = await happi.get('/music', {\n                params:{\n                    q:searchTerm,\n                    limit:50,\n                    apikey:'42405dFzin2GNUB68DBOOniGJLng7JMKBTGzosIyjGiEDUjuWj1GNv8p',\n                    type:'track'\n                }\n            });\n\n            setResults(response.data.result);\n        }\n        catch(err){\n\n          setError(\"somthing went wrong\")\n        }\n\n    };\n    useEffect(()=>{\n        getTracksByName('sia');\n        return () => {\n            mountedRef.current = false;   // clean up function\n          }\n    },[])\n\n    return [results,getTracksByName,errorMsg];\n};"]},"metadata":{},"sourceType":"module"}